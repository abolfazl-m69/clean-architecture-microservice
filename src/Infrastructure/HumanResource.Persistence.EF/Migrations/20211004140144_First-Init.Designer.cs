// <auto-generated />
using System;
using Accounting.Persistence.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Accounting.Persistence.EF.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    [Migration("20211004140144_First-Init")]
    partial class FirstInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("AccountSeq");

            modelBuilder.HasSequence("BranchSeq");

            modelBuilder.HasSequence("CostCenterSeq");

            modelBuilder.HasSequence("FiscalYearSeq");

            modelBuilder.HasSequence("FloatAccountSeq");

            modelBuilder.HasSequence("VoucherSeq");

            modelBuilder.Entity("Accounting.Domain.Model.Account.Account", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountDiscriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AccountNature")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EnglishName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("AccountDiscriminator").HasValue("Account");
                });

            modelBuilder.Entity("Accounting.Domain.Model.AccountTemplates.AccountTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PersianName")
                        .HasColumnType("text");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("AccountTemplates");
                });

            modelBuilder.Entity("Accounting.Domain.Model.Branches.Branch", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("AbbreviationChar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ExternalSystemId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCentralBranch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<bool>("UseGregorianCalendar")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Accounting.Domain.Model.CostCenters.CostCenter", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("Accounting.Domain.Model.FiscalYear.FiscalYear", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("EndDate");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text")
                        .HasColumnName("EnglishName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.ToTable("FiscalYears");
                });

            modelBuilder.Entity("Accounting.Domain.Model.FloatAccount.FloatAccount", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric")
                        .HasColumnName("Budget");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text")
                        .HasColumnName("EnglishName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<long?>("ParentFloatAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("ParentFloatAccountId");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("FloatAccounts");
                });

            modelBuilder.Entity("Accounting.Domain.Model.Voucher.Voucher", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<long?>("FirstCostCenterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FloatAccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FormalDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("IssuedBranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("IssuedBranchId");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<long?>("SecondCostCenterId")
                        .HasColumnType("bigint");

                    b.Property<long>("TradingUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("TradingUnitId");

                    b.Property<long>("VoucherTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("VoucherTypeId");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Accounting.Domain.Model.Account.AccountGroups.AccountGroup", b =>
                {
                    b.HasBaseType("Accounting.Domain.Model.Account.Account");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("AccountGroup");
                });

            modelBuilder.Entity("Accounting.Domain.Model.Account.DetailedAccounts.DetailedAccount", b =>
                {
                    b.HasBaseType("Accounting.Domain.Model.Account.Account");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubsidiaryAccountId")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("DetailedAccount");
                });

            modelBuilder.Entity("Accounting.Domain.Model.Account.GeneralAccounts.GeneralAccount", b =>
                {
                    b.HasBaseType("Accounting.Domain.Model.Account.Account");

                    b.Property<long?>("AccountGroupId")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("GeneralAccount");
                });

            modelBuilder.Entity("Accounting.Domain.Model.Account.SubsidiaryAccounts.SubsidiaryAccount", b =>
                {
                    b.HasBaseType("Accounting.Domain.Model.Account.Account");

                    b.Property<long?>("GeneralAccountId")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("SubsidiaryAccount");
                });

            modelBuilder.Entity("Accounting.Domain.Model.AccountTemplates.AccountTemplate", b =>
                {
                    b.OwnsMany("Accounting.Domain.Model.AccountTemplates.AccountTemplateItem", "AccountTemplateItems", b1 =>
                        {
                            b1.Property<long>("AccountTemplateId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint")
                                .HasColumnName("Account_Id");

                            b1.Property<int>("PropertyInfo")
                                .HasColumnType("integer")
                                .HasColumnName("PropertyInfo");

                            b1.Property<int>("TypeOfDebitCredit")
                                .HasColumnType("integer")
                                .HasColumnName("TypeOfDebitCredit");

                            b1.HasKey("AccountTemplateId", "Id");

                            b1.ToTable("AccountTemplateItems");

                            b1.WithOwner()
                                .HasForeignKey("AccountTemplateId");
                        });

                    b.Navigation("AccountTemplateItems");
                });

            modelBuilder.Entity("Accounting.Domain.Model.FloatAccount.FloatAccount", b =>
                {
                    b.OwnsOne("Accounting.Domain.Model.FloatAccount.AccountReferenceInfo", "AccountReferenceInfo", b1 =>
                        {
                            b1.Property<long>("FloatAccountId")
                                .HasColumnType("bigint");

                            b1.Property<long>("AccountReferenceId")
                                .HasColumnType("bigint")
                                .HasColumnName("AccountReferenceId");

                            b1.Property<int>("AccountReferenceType")
                                .HasColumnType("integer")
                                .HasColumnName("AccountReferenceType");

                            b1.Property<string>("LegacyAccountSystemReferenceId")
                                .HasColumnType("text")
                                .HasColumnName("LegacyAccountSystemReferenceId");

                            b1.HasKey("FloatAccountId");

                            b1.ToTable("FloatAccounts");

                            b1.WithOwner()
                                .HasForeignKey("FloatAccountId");
                        });

                    b.Navigation("AccountReferenceInfo");
                });

            modelBuilder.Entity("Accounting.Domain.Model.Voucher.Voucher", b =>
                {
                    b.OwnsMany("Accounting.Domain.Model.Voucher.VoucherItems.VoucherItem", "VoucherItems", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<long>("BranchTradingUnitId")
                                .HasColumnType("bigint");

                            b1.Property<long>("TradingUnitId")
                                .HasColumnType("bigint");

                            b1.Property<long>("VoucherId")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("VoucherId");

                            b1.ToTable("VoucherItems");

                            b1.WithOwner()
                                .HasForeignKey("VoucherId");

                            b1.OwnsOne("Accounting.Domain.Model.Voucher.VoucherItems.ReferenceInfo", "ReferenceInfo", b2 =>
                                {
                                    b2.Property<long>("VoucherItemId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bigint")
                                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                                    b2.Property<long>("ReferenceId")
                                        .HasColumnType("bigint")
                                        .HasColumnName("ReferenceId");

                                    b2.Property<int>("ReferenceType")
                                        .HasColumnType("integer")
                                        .HasColumnName("ReferenceType");

                                    b2.HasKey("VoucherItemId");

                                    b2.ToTable("VoucherItems");

                                    b2.WithOwner()
                                        .HasForeignKey("VoucherItemId");
                                });

                            b1.OwnsOne("Accounting.Domain.Model.Voucher.VoucherItems.VoucherAccountTemplateItem", "VoucherAccountTemplateItem", b2 =>
                                {
                                    b2.Property<long>("VoucherItemId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bigint")
                                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                                    b2.Property<long>("AccountId")
                                        .HasColumnType("bigint")
                                        .HasColumnName("Account_Id");

                                    b2.Property<int>("PropertyInfo")
                                        .HasColumnType("integer")
                                        .HasColumnName("PropertyInfo");

                                    b2.Property<int>("TypeOfDebitCredit")
                                        .HasColumnType("integer")
                                        .HasColumnName("TypeOfDebitCredit");

                                    b2.HasKey("VoucherItemId");

                                    b2.ToTable("VoucherItems");

                                    b2.WithOwner()
                                        .HasForeignKey("VoucherItemId");
                                });

                            b1.OwnsOne("Accounting.Domain.Model.Voucher.VoucherItems.VoucherItemAmounts", "VoucherItemAmounts", b2 =>
                                {
                                    b2.Property<long>("VoucherItemId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bigint")
                                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                                    b2.Property<decimal>("CreditAmount")
                                        .HasColumnType("numeric")
                                        .HasColumnName("CreditAmount");

                                    b2.Property<decimal>("DebitAmount")
                                        .HasColumnType("numeric")
                                        .HasColumnName("DebitAmount");

                                    b2.Property<decimal>("ExchangeCreditAmount")
                                        .HasColumnType("numeric")
                                        .HasColumnName("ExchangeCreditAmount");

                                    b2.Property<decimal>("ExchangeDebitAmount")
                                        .HasColumnType("numeric")
                                        .HasColumnName("ExchangeDebitAmount");

                                    b2.HasKey("VoucherItemId");

                                    b2.ToTable("VoucherItems");

                                    b2.WithOwner()
                                        .HasForeignKey("VoucherItemId");
                                });

                            b1.Navigation("ReferenceInfo");

                            b1.Navigation("VoucherAccountTemplateItem");

                            b1.Navigation("VoucherItemAmounts");
                        });

                    b.Navigation("VoucherItems");
                });
#pragma warning restore 612, 618
        }
    }
}
